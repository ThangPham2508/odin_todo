(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>c});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,'* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml, body {\n    height: 100%;\n}\n\n#content {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n#header {\n    height: 120px;\n    padding: 32px;\n    display: flex;\n    align-items: center;\n    background-color: #7FBCD2;\n    font-weight: bold;\n}\n\n#body {\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    background-color: #FFEEAF;\n    flex: 1;\n}\n\n#navbar {\n    display: flex;\n    flex-direction: column;\n    padding: 32px;\n    gap: 48px;\n    background-color: #E1FFEE;\n}\n\n.categories {\n    display: flex;\n    flex-direction: column;\n    gap: 32px;\n}\n\n.categories button, .projectList button {\n    display: flex;\n    gap: 8px;\n    align-items: center;\n    cursor: pointer;\n    appearance: none;\n    padding: 8px;\n    font-size: 1rem;\n    border: none;\n    border-radius: 10px;\n    background-color: #E1FFEE;\n}\n\n.categories button:hover {\n    background-color: #A5F1E9;\n}\n\nbutton.selected {\n    background-color: #A5F1E9;\n}\n\n.logo {\n    display: flex;\n    align-items: center;\n    gap: 16px;\n    font-size: 2rem;\n}\n\n.logoimg {\n    width: 64px;\n}\n\n.icon {\n    width: 24px;\n}\n\n.projects .heading {\n    font-size: 2rem;\n    font-weight: bold;\n    display: flex;\n    justify-content: space-between;\n}\n\n.addproject {\n    width: 32px;\n    height: 32px;\n    appearance: none;\n    border: none;\n    background-color: #E1FFEE;\n    font-size: 1.5rem;\n    font-weight: bold;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.addproject:hover {\n    background-color: #A5F1E9;\n}\n\n.projects {\n    display: flex;\n    flex-direction: column;\n    gap: 24px;\n}\n\n.projectList {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n.project {\n    display : flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.project .delete {\n    appearance: none;\n    background-color: inherit;\n    border: none;\n}\n\n.project .icon {\n    height: 15px;\n    width: 15px;\n}\n\n.prompt {\n    height: 100px;\n    display: grid;\n    grid-template: 1fr 1fr / 1fr 1fr;\n    gap: 8px;\n}\n\n.prompt input {\n    grid-row: 1;\n    grid-column: 1 / 3;\n}\n\n.prompt button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 1.25rem;\n    appearance: none;\n    border: none;\n    cursor: pointer;\n}\n\n.prompt .add {\n    background-color: rgb(159, 232, 155);\n}\n\n.prompt .cancel {\n    background-color: rgb(232, 155, 155)\n}\n\n#todos {\n    padding: 32px 164px;\n    display: flex;\n    flex-direction: column;\n}\n\n#todos .heading {\n    font-size: 2rem;\n    font-weight: bold;\n    margin-bottom: 32px;\n}\n\n.todo, .addtask {\n    background-color: #E1FFEE;\n    height: 64px;\n    padding: 32px;\n    border-radius: 10px;\n    display: flex;\n    align-items: center;\n    gap: 16px;\n}\n\n.todo:hover, .addtask:hover {\n    background-color: #A5F1E9;\n    cursor: pointer;\n}\n\ninput[type="checkbox"] {\n    appearance: none;\n    width: 20px;\n    height: 20px;\n    border: 1px solid black;\n    border-radius: 10px;\n    position: relative;\n    vertical-align: -2px;\n}\n\ninput[type="checkbox"]::before {\n    content: "✔";\n    position: absolute;\n    font-size: 1.7em;\n    right: -1px;\n    top: -0.2em;\n    visibility: hidden;\n}\n\ninput[type="checkbox"]:checked::before {\n    visibility: visible;\n}\n\n.todo .title {\n    margin-right: auto;\n    font-size: 1.25rem;\n}\n\n.title {\n    display: flex;\n    align-items: center;\n}\n\n.title.done {\n    color: gray;\n    text-decoration: line-through;\n}\n\n.priority {\n    border: 3px solid rgb(246, 182, 153);\n}\n\n.todo button .icon {\n    width: 20px;\n}\n\n.todo button, input[type="date"], input[type="text"] {\n    cursor: pointer;\n    appearance: none;\n    background-color: inherit;\n    border: none;\n}\n\ninput[type="date"]:focus {\n    background-color: #E1FFEE;\n}\n\n.addtask {\n    font-size: 1.25rem;\n}\n\ninput[type="text"] {\n    font-size: inherit;\n    font-weight: inherit;\n    font-family: inherit;\n}\n\nbutton {\n    display: flex;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nhtml, body {\n    height: 100%;\n}\n\n#content {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n#header {\n    height: 120px;\n    padding: 32px;\n    display: flex;\n    align-items: center;\n    background-color: #7FBCD2;\n    font-weight: bold;\n}\n\n#body {\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    background-color: #FFEEAF;\n    flex: 1;\n}\n\n#navbar {\n    display: flex;\n    flex-direction: column;\n    padding: 32px;\n    gap: 48px;\n    background-color: #E1FFEE;\n}\n\n.categories {\n    display: flex;\n    flex-direction: column;\n    gap: 32px;\n}\n\n.categories button, .projectList button {\n    display: flex;\n    gap: 8px;\n    align-items: center;\n    cursor: pointer;\n    appearance: none;\n    padding: 8px;\n    font-size: 1rem;\n    border: none;\n    border-radius: 10px;\n    background-color: #E1FFEE;\n}\n\n.categories button:hover {\n    background-color: #A5F1E9;\n}\n\nbutton.selected {\n    background-color: #A5F1E9;\n}\n\n.logo {\n    display: flex;\n    align-items: center;\n    gap: 16px;\n    font-size: 2rem;\n}\n\n.logoimg {\n    width: 64px;\n}\n\n.icon {\n    width: 24px;\n}\n\n.projects .heading {\n    font-size: 2rem;\n    font-weight: bold;\n    display: flex;\n    justify-content: space-between;\n}\n\n.addproject {\n    width: 32px;\n    height: 32px;\n    appearance: none;\n    border: none;\n    background-color: #E1FFEE;\n    font-size: 1.5rem;\n    font-weight: bold;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.addproject:hover {\n    background-color: #A5F1E9;\n}\n\n.projects {\n    display: flex;\n    flex-direction: column;\n    gap: 24px;\n}\n\n.projectList {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n.project {\n    display : flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.project .delete {\n    appearance: none;\n    background-color: inherit;\n    border: none;\n}\n\n.project .icon {\n    height: 15px;\n    width: 15px;\n}\n\n.prompt {\n    height: 100px;\n    display: grid;\n    grid-template: 1fr 1fr / 1fr 1fr;\n    gap: 8px;\n}\n\n.prompt input {\n    grid-row: 1;\n    grid-column: 1 / 3;\n}\n\n.prompt button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 1.25rem;\n    appearance: none;\n    border: none;\n    cursor: pointer;\n}\n\n.prompt .add {\n    background-color: rgb(159, 232, 155);\n}\n\n.prompt .cancel {\n    background-color: rgb(232, 155, 155)\n}\n\n#todos {\n    padding: 32px 164px;\n    display: flex;\n    flex-direction: column;\n}\n\n#todos .heading {\n    font-size: 2rem;\n    font-weight: bold;\n    margin-bottom: 32px;\n}\n\n.todo, .addtask {\n    background-color: #E1FFEE;\n    height: 64px;\n    padding: 32px;\n    border-radius: 10px;\n    display: flex;\n    align-items: center;\n    gap: 16px;\n}\n\n.todo:hover, .addtask:hover {\n    background-color: #A5F1E9;\n    cursor: pointer;\n}\n\ninput[type="checkbox"] {\n    appearance: none;\n    width: 20px;\n    height: 20px;\n    border: 1px solid black;\n    border-radius: 10px;\n    position: relative;\n    vertical-align: -2px;\n}\n\ninput[type="checkbox"]::before {\n    content: "✔";\n    position: absolute;\n    font-size: 1.7em;\n    right: -1px;\n    top: -0.2em;\n    visibility: hidden;\n}\n\ninput[type="checkbox"]:checked::before {\n    visibility: visible;\n}\n\n.todo .title {\n    margin-right: auto;\n    font-size: 1.25rem;\n}\n\n.title {\n    display: flex;\n    align-items: center;\n}\n\n.title.done {\n    color: gray;\n    text-decoration: line-through;\n}\n\n.priority {\n    border: 3px solid rgb(246, 182, 153);\n}\n\n.todo button .icon {\n    width: 20px;\n}\n\n.todo button, input[type="date"], input[type="text"] {\n    cursor: pointer;\n    appearance: none;\n    background-color: inherit;\n    border: none;\n}\n\ninput[type="date"]:focus {\n    background-color: #E1FFEE;\n}\n\n.addtask {\n    font-size: 1.25rem;\n}\n\ninput[type="text"] {\n    font-size: inherit;\n    font-weight: inherit;\n    font-family: inherit;\n}\n\nbutton {\n    display: flex;\n}'],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var c=0;c<this.length;c++){var A=this[c][0];null!=A&&(i[A]=!0)}for(var d=0;d<e.length;d++){var s=[].concat(e[d]);o&&i[s[0]]||(void 0!==a&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=a),t&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=t):s[2]=t),r&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=r):s[4]="".concat(r)),n.push(s))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},i=[],c=0;c<e.length;c++){var A=e[c],d=o.base?A[0]+o.base:A[0],s=a[d]||0,l="".concat(d," ").concat(s);a[d]=s+1;var p=t(l),u={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var g=r(u,o);o.byIndex=c,n.splice(c,0,{identifier:l,updater:g,references:1})}i.push(l)}return i}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var A=o(e,r),d=0;d<a.length;d++){var s=t(a[d]);0===n[s].references&&(n[s].updater(),n.splice(s,1))}a=A}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");o.length&&(e=o[o.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.nc=void 0,(()=>{const e=t.p+"9af6b43c402a8c89a472.png",n=t.p+"63bf270ce06c27f992c1.png",o=t.p+"9d023b4af191f14f700b.png",r=t.p+"314a070978127990ced7.png",a=t.p+"a6fd29509719f079bfd7.png",i=t.p+"a6f2b0ac76894d0dd367.png";function c(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function A(e){c(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function d(e){c(1,arguments);var n=A(e);return n.setHours(0,0,0,0),n}function s(e,n){c(2,arguments);var t=d(e),o=d(n);return t.getTime()===o.getTime()}const l=(()=>{let e=[];return{getCount:()=>e.length,addTodo:()=>{let n=((e,n,t,o)=>{let r=!1,a=null;return{setID:e=>{a=e},getID:()=>a,changeTitle:n=>{e=n},changeDescription:e=>{},changeDue:e=>{t=new Date(e.target.value)},changePriority:()=>{o=!o},changeStatus:e=>{r=e},getTitle:()=>e,getDue:()=>t,getStatus:()=>r,getPriority:()=>o}})("Title",0,null,!1);return n.setID(e.length),e.push(n),n},updateTodo:n=>{for(let t=n;t<e.length;t++)e[t].setID(t)},deleteTodo:n=>{e.splice(n,1)},changeTitle:(n,t)=>{e[t].changeTitle(n)},changeDescription:(n,t)=>{e[t].changeDescription(n)},changeDue:n=>{let t=n.target.parentElement.attributes.key.value;e[t].changeDue(n)},changePriority:n=>{let t=n.target.parentElement.parentElement.attributes.key.value;console.log("test"),document.querySelector(`div[key="${t}"]`).classList.toggle("priority"),e[t].changePriority()},changeStatus:n=>{let t=n.target.parentElement.attributes.key.value;e[t].changeStatus(n.target.checked),document.querySelector(`div[key="${t}"] .title`).classList.toggle("done")},getAll:()=>e.filter((()=>!0)),getToday:()=>e.filter((e=>function(e){return c(1,arguments),s(e,Date.now())}(e.getDue()))),getImportant:()=>e.filter((e=>!0===e.getPriority()))}})(),p=(()=>{let e=[],n=null;return{addProject:n=>{let t=(e=>{let n=null,t=[];return{getID:()=>n,setID:e=>{n=e},getTitle:()=>e,addTodo:e=>{t.push(e)},getAll:()=>t.filter((()=>!0))}})(n=n||"Project");return t.setID(e.length),e.push(t),t},deleteProject:n=>{for(let t in e.splice(n,1))l.deleteTodo(t.getID)},updateProject:n=>{for(let t=n;t<e.length;t++)e[t].setID(t)},getCount:()=>e.length,setActive:t=>{n=null!==t?e[t]:null},addTodo:e=>{null!==n&&n.addTodo(e)},getActiveTodos:()=>n.getAll()}})(),u=()=>{for(const e of l.getAll())f.createTodo(e)},g=()=>{for(const e of l.getToday())f.createTodo(e)},m=()=>{for(const e of l.getImportant())f.createTodo(e)},C=()=>{for(const e of p.getActiveTodos())f.createTodo(e)},f=(()=>{const e=n=>{const t=document.createElement("input");t.setAttribute("type","text");const o=document.querySelector(`div[key="${n.target.parentElement.attributes.key.value}"]`);n.target.removeEventListener("click",e),t.value=o.childNodes[1].textContent,o.childNodes[1].textContent="",o.childNodes[1].appendChild(t),t.addEventListener("keydown",(n=>{if("Enter"===n.code){const t=o.querySelector(".title");t.textContent=n.target.value,t.addEventListener("click",e),l.changeTitle(n.target.value,o.getAttribute("key"))}}))},n=e=>{const n=document.querySelector(`div[key="${e.target.parentElement.parentElement.attributes.key.value}"]`),t=document.querySelector(".todolist");l.deleteTodo(n.getAttribute("key")),(e=>{for(let n=e;n<l.getCount();n++)document.querySelector(`.todolist div[key="${+n+1}"]`).setAttribute("key",n);l.updateTodo(e)})(n.getAttribute("key")),t.removeChild(n)},t=e=>{const n=document.querySelector(`.project[key="${e.target.parentElement.parentElement.attributes.key.value}"]`),t=document.querySelector(".projectList");p.deleteProject(n.getAttribute("key")),(e=>{for(let n=e;n<p.getCount();n++)document.querySelector(`.project[key="${+n+1}"]`).setAttribute("key",n);p.updateProject(e)})(n.getAttribute("key")),t.removeChild(n)},o=e=>{const n=document.querySelector(".todolist"),t=document.querySelectorAll(".categories button"),o=document.querySelectorAll(".projectList .project");let r=e.target;for(;"BUTTON"!==r.tagName||void 0===r.attributes.key;)r=r.parentElement;p.setActive(r.attributes.key.value),n.textContent="";for(let e of t)e.classList.remove("selected");for(let e of o)e.classList.remove("selected");r.classList.add("selected"),C()},r=e=>{const n=document.querySelector(".projectList"),r=document.createElement("button");r.classList.add("project"),r.setAttribute("key",e.getID()),r.addEventListener("click",o);const i=document.createElement("div");i.textContent=e.getTitle();const c=document.createElement("button");c.classList.add("delete");let A=new Image;A.src=a,A.classList.add("icon"),c.addEventListener("click",t),c.appendChild(A),r.appendChild(i),r.appendChild(c),n.appendChild(r)};return{createTodo:t=>{const o=document.querySelector(".todolist"),r=document.createElement("div");r.classList.add("todo"),r.setAttribute("key",t.getID());const c=document.createElement("input");c.setAttribute("type","checkbox"),c.setAttribute("id","checkbox");const A=document.createElement("div");A.classList.add("title"),A.textContent=t.getTitle(),A.addEventListener("click",e),t.getStatus()&&(A.classList.add("done"),c.checked=!0);const d=document.createElement("button"),s=new Image;s.classList.add("icon"),s.src=i,d.appendChild(s),t.getPriority()&&r.classList.add("priority");const p=document.createElement("input");p.setAttribute("type","date"),p.valueAsDate=t.getDue();const u=document.createElement("button"),g=new Image;g.classList.add("icon"),g.src=a,u.appendChild(g),u.addEventListener("click",n),p.addEventListener("change",l.changeDue),d.addEventListener("click",l.changePriority),c.addEventListener("change",l.changeStatus),r.appendChild(c),r.appendChild(A),r.appendChild(d),r.appendChild(p),r.appendChild(u),o.appendChild(r)},createProject:r,promptProject:()=>{const e=document.querySelector(".prompt"),n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("placeholder","project name");const t=document.createElement("button");t.classList.add("add"),t.textContent="Add",t.addEventListener("click",(()=>{r(p.addProject(n.value)),e.textContent=""}));const o=document.createElement("button");o.classList.add("cancel"),o.textContent="Cancel",o.addEventListener("click",(()=>{e.textContent=""})),e.appendChild(n),e.appendChild(t),e.appendChild(o)}}})();var h=t(379),b=t.n(h),B=t(795),I=t.n(B),y=t(569),x=t.n(y),E=t(565),v=t.n(E),k=t(216),j=t.n(k),L=t(589),w=t.n(L),T=t(426),S={};S.styleTagTransform=w(),S.setAttributes=v(),S.insert=x().bind(null,"head"),S.domAPI=I(),S.insertStyleElement=j(),b()(T.Z,S),T.Z&&T.Z.locals&&T.Z.locals,function(){const t=document.querySelector("#content"),a=document.createElement("div");a.setAttribute("id","header");const i=document.createElement("div");i.classList.add("logo");const c=new Image;c.src=e,c.classList.add("icon");const A=document.createElement("div");A.classList.add("logotxt"),A.textContent="TODO LIST",i.appendChild(c),i.appendChild(A),a.appendChild(i);const d=document.createElement("div");d.setAttribute("id","body");const s=document.createElement("div");s.setAttribute("id","navbar");const l=document.createElement("div");l.classList.add("categories");let p=[n,o,r],u=["All Tasks","Today","Important"];for(let e=0;e<3;e++){const n=document.createElement("button");n.classList.add(u[e].toLowerCase().replace(/\s/g,""));const t=new Image;t.src=p[e],t.classList.add("icon");const o=document.createElement("div");o.textContent=u[e],n.appendChild(t),n.appendChild(o),l.appendChild(n)}const g=document.createElement("div");g.classList.add("projects");const m=document.createElement("div");m.classList.add("heading");const C=document.createElement("div");C.textContent="Projects";const f=document.createElement("button");f.classList.add("addproject"),f.textContent="+";const h=document.createElement("div");h.classList.add("projectList");const b=document.createElement("div");b.classList.add("prompt"),m.appendChild(C),m.appendChild(f),g.appendChild(m),g.appendChild(h),g.appendChild(b),s.appendChild(l),s.appendChild(g);const B=document.createElement("div");B.setAttribute("id","todos");const I=document.createElement("div");I.classList.add("todolist"),B.appendChild(I);const y=document.createElement("div");y.classList.add("addtask");const x=document.createElement("span");x.textContent="+",y.appendChild(x);const E=document.createElement("span");E.textContent="Add Task",y.appendChild(E),B.appendChild(y),d.appendChild(s),d.appendChild(B),t.appendChild(a),t.appendChild(d)}(),document.querySelector(".addtask").addEventListener("click",(()=>{let e=l.addTodo();f.createTodo(e),p.addTodo(e)}));const F=document.querySelector(".todolist"),D=document.querySelectorAll(".categories button");D.forEach((e=>{e.addEventListener("click",(e=>{let n=e.target;for(;"BUTTON"!==n.tagName;)n=n.parentElement;F.textContent="";for(let e of D)e.classList.remove("selected");const t=document.querySelectorAll(".projectList .project");for(let e of t)e.classList.remove("selected");n.classList.add("selected"),n.classList.contains("alltasks")?u():n.classList.contains("today")?g():m(),p.setActive(null),console.log(n.classList[0])}),{capture:!1})})),document.querySelector(".addproject").addEventListener("click",(()=>{f.promptProject()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,